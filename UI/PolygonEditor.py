import os
import numpy as np
import yaml
from PyQt5.QtCore import Qt, QSize, QTimer
from PyQt5.QtGui import QColor, QPen, QPainter, QPixmap, QIcon, QBrush, QFont
from PyQt5.QtWidgets import (QMainWindow, QVBoxLayout, QHBoxLayout,
                             QWidget, QLabel, QPushButton, QListWidget, QComboBox,
                             QDialog, QGraphicsScene, QGraphicsTextItem,
                             QMessageBox, QSlider, QStatusBar, QGraphicsEllipseItem, QGraphicsView)

from UI.Enums import ObjectType
from UI.MapGraphicsView import MapGraphicsView
from UI.MapObject import MapObject
from UI.ObjectDialog import ObjectDialog
from main import run_simulation_from_config
from modules.Manager import Manager
from modules.Messages import CPPDrawerObjectsMessage
from modules.constants import MessageType


class PolygonEditor(QMainWindow):
    def __init__(self):
        super().__init__()
        self.manager = Manager()
        self.scene_objects = {}  # {obj_id: MapObject}

        self.setWindowTitle("–†–µ–¥–∞–∫—Ç–æ—Ä –ø–æ–ª–∏–≥–æ–Ω–∞")
        self.setGeometry(100, 100, 1600, 1000)

        # –ò–∫–æ–Ω–∫–∏ –æ–±—ä–µ–∫—Ç–æ–≤
        self.icons = {
            ObjectType.AIR_PLANE: self.load_icon("images/aircraft_icon.png", "üõ©Ô∏è", 60),
            ObjectType.HELICOPTER: self.load_icon("images/helicopter.png", "üöÅ", 60),
            ObjectType.ANOTHER: self.load_icon("unknown.png", "‚ùì", 60),
            ObjectType.MISSILE_LAUNCHER: self.load_icon("images/missile_launcher_icon.png", "üöÄ", 60),
            ObjectType.RADAR: self.load_icon("images/radar_icon.png", "üì°", 60),
            ObjectType.MISSILE: self.load_icon("images/GM.png", "*", 30)
        }

        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.default_config = {
            "simulation": {
                "time_step": 1,
                "duration": 60
            },
            "air_environment": {
                "id": 999,
                "position": [0.0, 0.0, 0.0],
                "targets": []
            },
            "combat_control_point": {
                "id": 0,
                "missile_launcher_ids": [],
                "radar_ids": []
            },
            "missile_launchers": [],
            "radars": []
        }

        self.config = self.default_config.copy()
        self.next_ids = {
            ObjectType.AIR_PLANE: 1,
            ObjectType.HELICOPTER: 1,
            ObjectType.ANOTHER: 1,
            ObjectType.MISSILE_LAUNCHER: 3,
            ObjectType.RADAR: 5
        }
        self.default_config_path = "simulation_config.yaml"
        self.init_ui()


    def load_icon(self, filename, fallback, size):
        if os.path.exists(filename):
            pixmap = QPixmap(filename)
            return pixmap.scaled(size, size, Qt.KeepAspectRatio, Qt.SmoothTransformation)
        else:
            pixmap = QPixmap(size, size)
            pixmap.fill(Qt.transparent)
            painter = QPainter(pixmap)
            painter.setFont(self.font())
            painter.drawText(pixmap.rect(), Qt.AlignCenter, fallback)
            painter.end()
            return pixmap

    def init_ui(self):
        self.setWindowIcon(QIcon(self.icons[ObjectType.AIR_PLANE]))

        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        main_layout = QHBoxLayout(central_widget)

        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        left_panel = QWidget()
        left_panel.setMaximumWidth(350)
        left_layout = QVBoxLayout(left_panel)

        # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –æ–±—ä–µ–∫—Ç–∞
        self.object_type_combo = QComboBox()
        self.object_type_combo.setIconSize(QSize(48, 48))
        for obj_type in [ObjectType.AIR_PLANE, ObjectType.HELICOPTER, ObjectType.ANOTHER,
                         ObjectType.MISSILE_LAUNCHER, ObjectType.RADAR]:
            self.object_type_combo.addItem(
                QIcon(self.icons[obj_type]),
                ObjectType.get_display_name(obj_type),
                obj_type
            )

        self.object_type_combo.currentIndexChanged.connect(self.set_object_type)
        self.current_object_type = ObjectType.AIR_PLANE

        left_layout.addWidget(QLabel("–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞:"))
        left_layout.addWidget(self.object_type_combo)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        btn_layout = QHBoxLayout()
        self.delete_btn = QPushButton("–£–¥–∞–ª–∏—Ç—å")
        self.delete_btn.setIcon(QIcon.fromTheme("edit-delete"))
        self.delete_btn.clicked.connect(self.delete_object)

        self.save_btn = QPushButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥")
        self.save_btn.setIcon(QIcon.fromTheme("document-save"))
        self.save_btn.clicked.connect(self.save_config)

        self.run_btn = QPushButton("–ó–∞–ø—É—Å–∫ –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏—è")
        self.run_btn.setIcon(QIcon.fromTheme("media-playback-start"))
        self.run_btn.clicked.connect(self.run_simulation)

        btn_layout.addWidget(self.delete_btn)
        btn_layout.addWidget(self.save_btn)
        btn_layout.addWidget(self.run_btn)
        left_layout.addLayout(btn_layout)

        # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
        zoom_layout = QHBoxLayout()
        self.zoom_out_btn = QPushButton("-")
        self.zoom_out_btn.clicked.connect(self.zoom_out)
        self.zoom_slider = QSlider(Qt.Horizontal)
        self.zoom_slider.setRange(10, 300)
        self.zoom_slider.setValue(20)
        self.zoom_slider.valueChanged.connect(self.zoom_slider_changed)
        self.zoom_in_btn = QPushButton("+")
        self.zoom_in_btn.clicked.connect(self.zoom_in)

        zoom_layout.addWidget(self.zoom_out_btn)
        zoom_layout.addWidget(self.zoom_slider)
        zoom_layout.addWidget(self.zoom_in_btn)
        left_layout.addLayout(zoom_layout)

        # –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤
        self.objects_list = QListWidget()
        self.objects_list.itemSelectionChanged.connect(self.select_object)
        left_layout.addWidget(QLabel("–û–±—ä–µ–∫—Ç—ã –Ω–∞ –ø–æ–ª–∏–≥–æ–Ω–µ:"))
        left_layout.addWidget(self.objects_list)

        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –∫–∞—Ä—Ç–∞
        right_panel = QWidget()
        right_layout = QVBoxLayout(right_panel)

        # –°—Ü–µ–Ω–∞ –∏ –≤–∏–¥
        self.scene = QGraphicsScene()

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ü–µ–Ω—ã —Å –±–µ–ª—ã–º —Ñ–æ–Ω–æ–º
        self.scene.setSceneRect(-15000, -15000, 30000, 30000)
        self.scene.setBackgroundBrush(Qt.white)  # –ë–µ–ª—ã–π —Ñ–æ–Ω


        # –†–∏—Å—É–µ–º —Å–µ—Ç–∫—É —Å—Ä–∞–∑—É –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        self.draw_grid()

        self.view = MapGraphicsView(self.scene, self)
        self.view.setMinimumSize(800, 800)
        self.view.zoomChanged.connect(self.update_zoom_slider)
        right_layout.addWidget(self.view)

        main_layout.addWidget(left_panel)
        main_layout.addWidget(right_panel)

        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_bar = QStatusBar()
        self.setStatusBar(self.status_bar)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        self.draw_grid()
        self.update_status()

    def set_object_type(self, index):
        self.current_object_type = self.object_type_combo.itemData(index)
        self.status_bar.showMessage(f"–í—ã–±—Ä–∞–Ω —Ç–∏–ø: {ObjectType.get_display_name(self.current_object_type)}", 2000)

    def add_object(self, position):
        default_id = self.next_ids[self.current_object_type]
        dialog = ObjectDialog(self.current_object_type, position, default_id, self)
        if dialog.exec_() == QDialog.Accepted:
            obj_data = dialog.get_object_data()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å ID
            if not self.is_id_unique(obj_data["id"]):
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞",
                                    f"–û–±—ä–µ–∫—Ç —Å ID {obj_data['id']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π ID.")
                return  # –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç

            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ ID —É–Ω–∏–∫–∞–ª–µ–Ω
            self.next_ids[self.current_object_type] = max(
                self.next_ids[self.current_object_type],
                int(obj_data["id"]) + 1)

            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –≤ –∫–æ–Ω—Ñ–∏–≥
            if self.current_object_type in [ObjectType.AIR_PLANE, ObjectType.HELICOPTER, ObjectType.ANOTHER]:
                self.config["air_environment"]["targets"].append(obj_data)
            elif self.current_object_type == ObjectType.MISSILE_LAUNCHER:
                self.config["missile_launchers"].append(obj_data)
                self.config["combat_control_point"]["missile_launcher_ids"].append(obj_data["id"])
                obj_data["missiles"] = [
                    {
                        "id": obj_data["id"]* 1000 + i,
                        "position": obj_data["position"],  # –ü–æ–∑–∏—Ü–∏—è —Ä–∞–∫–µ—Ç—ã = –ø–æ–∑–∏—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
                        "velocity": obj_data["missile_velocity"],
                        "explosion_radius": obj_data["missile_radius"],
                        "life_time": obj_data["missile_life_time"],
                    }
                    for i in range(1, obj_data.get("max_missiles", 1) + 1)
                ]
            elif self.current_object_type == ObjectType.RADAR:
                self.config["radars"].append(obj_data)
                self.config["combat_control_point"]["radar_ids"].append(obj_data["id"])

            self.update_scene()
            self.update_objects_list()

    def draw_grid(self):
        """–†–∏—Å—É–µ—Ç —è—Ä–∫—É—é –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–Ω—É—é —Å–µ—Ç–∫—É –Ω–∞ —Å—Ü–µ–Ω–µ"""
        # –Ø—Ä–∫–∏–µ –æ—Å–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        axis_pen = QPen(QColor(180, 180, 180), 2, Qt.SolidLine)
        self.scene.addLine(-15000, 0, 15000, 0, axis_pen)  # –û—Å—å X
        self.scene.addLine(0, -15000, 0, 15000, axis_pen)  # –û—Å—å Y

        # –Ø—Ä–∫–∞—è –æ—Å–Ω–æ–≤–Ω–∞—è —Å–µ—Ç–∫–∞
        main_grid_pen = QPen(QColor(200, 200, 200), 1, Qt.SolidLine)

        # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Å–µ—Ç–∫–∞ (–±–æ–ª–µ–µ —á–∞—Å—Ç–∞—è)
        secondary_grid_pen = QPen(QColor(230, 230, 230), 1, Qt.DotLine)

        # –û—Å–Ω–æ–≤–Ω—ã–µ –ª–∏–Ω–∏–∏ (–∫–∞–∂–¥—ã–µ 1000 –µ–¥–∏–Ω–∏—Ü)
        for x in range(-15000, 15001, 1000):
            if x != 0:  # –ù–µ —Ä–∏—Å—É–µ–º –ø–æ–≤–µ—Ä—Ö –æ—Å–µ–π
                self.scene.addLine(x, -15000, x, 15000, main_grid_pen)

        for y in range(-15000, 15001, 1000):
            if y != 0:  # –ù–µ —Ä–∏—Å—É–µ–º –ø–æ–≤–µ—Ä—Ö –æ—Å–µ–π
                self.scene.addLine(-15000, y, 15000, y, main_grid_pen)

        # –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏ (–∫–∞–∂–¥—ã–µ 250 –µ–¥–∏–Ω–∏—Ü)
        for x in range(-15000, 15001, 250):
            if x % 1000 != 0:  # –ù–µ —Ä–∏—Å—É–µ–º –ø–æ–≤–µ—Ä—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö –ª–∏–Ω–∏–π
                self.scene.addLine(x, -15000, x, 15000, secondary_grid_pen)

        for y in range(-15000, 15001, 250):
            if y % 1000 != 0:  # –ù–µ —Ä–∏—Å—É–µ–º –ø–æ–≤–µ—Ä—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö –ª–∏–Ω–∏–π
                self.scene.addLine(-15000, y, 15000, y, secondary_grid_pen)

        # –Ø—Ä–∫–∏–µ –ø–æ–¥–ø–∏—Å–∏ –æ—Å–µ–π
        font = QFont()
        font.setPointSize(10)
        font.setBold(True)

        # –ü–æ–¥–ø–∏—Å–∏ –æ—Å–∏ X
        for x in range(-14000, 15000, 2000):
            text = self.scene.addText(str(x // 1000), font)
            text.setPos(x - 20, 20)
            text.setDefaultTextColor(QColor(120, 120, 120))
            text.setZValue(-999)

        # –ü–æ–¥–ø–∏—Å–∏ –æ—Å–∏ Y
        for y in range(-14000, 15000, 2000):
            if y != 0:
                text = self.scene.addText(str(y // 1000), font)
                text.setPos(20, y - 10)
                text.setDefaultTextColor(QColor(120, 120, 120))
                text.setZValue(-999)

        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–æ–∫ –æ—Å–µ–π
        cross_pen = QPen(QColor(150, 150, 150), 3)
        self.scene.addLine(-50, 0, 50, 0, cross_pen)
        self.scene.addLine(0, -50, 0, 50, cross_pen)

    def update_scene(self):
        # –û—á–∏—â–∞–µ–º –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã
        for obj_id, obj in list(self.scene_objects.items()):
            self.scene.removeItem(obj)
        self.scene_objects.clear()

        # –†–∏—Å—É–µ–º –æ–±—ä–µ–∫—Ç—ã –∑–∞–Ω–æ–≤–æ
        for target in self.config["air_environment"]["targets"]:
            self.draw_map_object(target["position"], target["type"], target.get("id", ""))

        for launcher in self.config["missile_launchers"]:
            self.draw_map_object(launcher["position"], "MISSILE_LAUNCHER", launcher.get("id", ""))

            # –†–∏—Å—É–µ–º —Ä–∞–∫–µ—Ç—ã —ç—Ç–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏
            for missile in launcher.get("missiles", []):
                self.draw_map_object(launcher["position"], "MISSILE", missile["id"])

        for radar in self.config["radars"]:
            self.draw_map_object(radar["position"], "RADAR", radar.get("id", ""))

    def draw_map_object(self, position, obj_type, obj_id):
        enum_type = ObjectType[obj_type] if isinstance(obj_type, str) else obj_type
        icon = self.icons.get(enum_type, self.icons[ObjectType.ANOTHER])

        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç
        if str(obj_id) in self.scene_objects:
            obj = self.scene_objects[str(obj_id)]
            obj.setPos(position[0] - icon.width() / 2, position[1] - icon.height() / 2)
        else:
            obj = MapObject(icon, enum_type, obj_id)
            obj.setPos(position[0] - icon.width() / 2, position[1] - icon.height() / 2)
            self.scene.addItem(obj)
            self.scene_objects[str(obj_id)] = obj
            obj.trajectory_points = []  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ—á–µ–∫ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏

        # –î–ª—è –¥–≤–∏–∂—É—â–∏—Ö—Å—è –æ–±—ä–µ–∫—Ç–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
        if enum_type in [ObjectType.AIR_PLANE, ObjectType.HELICOPTER, ObjectType.MISSILE]:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ç–æ—á–∫—É
            point = self.scene.addEllipse(
                position[0] - 2, position[1] - 2, 4, 4,
                QPen(Qt.NoPen),
                QBrush(QColor(255, 165, 0, 200))  # –û—Ä–∞–Ω–∂–µ–≤—ã–π —Ü–≤–µ—Ç
            )
            point.setZValue(-1)
            obj.trajectory_points.append(point)

            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ—Å–ª–µ–¥–Ω–∏–µ 50)
            if len(obj.trajectory_points) > 50:
                old_point = obj.trajectory_points.pop(0)
                self.scene.removeItem(old_point)

        # –î–ª—è —Ä–∞–¥–∞—Ä–∞ —Ä–∏—Å—É–µ–º –∑–æ–Ω—É –¥–µ–π—Å—Ç–≤–∏—è (–∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏)
        elif enum_type == ObjectType.RADAR and str(obj_id) not in self.scene_objects:
            radar_config = next((r for r in self.config["radars"] if str(r["id"]) == str(obj_id)), None)
            if radar_config:
                radius = radar_config.get("max_distance", 10000)
                radar_range = self.scene.addEllipse(
                    position[0] - radius,
                    position[1] - radius,
                    radius * 2,
                    radius * 2,
                    QPen(QColor(0, 200, 0, 80), 1, Qt.DashDotLine)
                )
                radar_range.setZValue(-2)
                radar_range.setParentItem(obj)
                obj.radar_range = radar_range


    def update_objects_list(self):
        self.objects_list.clear()

        for target in self.config["air_environment"]["targets"]:
            display_name = ObjectType.get_display_name(ObjectType[target["type"]])
            self.objects_list.addItem(f"{display_name} {target.get('id', '')}")

        for launcher in self.config["missile_launchers"]:
            display_name = ObjectType.get_display_name(ObjectType.MISSILE_LAUNCHER)
            self.objects_list.addItem(f"{display_name} {launcher.get('id', '')}")

        for radar in self.config["radars"]:
            display_name = ObjectType.get_display_name(ObjectType.RADAR)
            self.objects_list.addItem(f"{display_name} {radar.get('id', '')}")

        self.update_status()

    def select_object(self):
        selected = self.objects_list.currentItem()
        if selected:
            for item in self.scene.items():
                if isinstance(item, MapObject):
                    display_name = ObjectType.get_display_name(item.obj_type)
                    if f"{display_name} {item.obj_id}" == selected.text():
                        self.view.centerOn(item)
                        break

    def delete_object(self):
        selected = self.objects_list.currentItem()
        if not selected:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ –≤—ã–±—Ä–∞–Ω –æ–±—ä–µ–∫—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return

        item_text = selected.text()

        # –£–¥–∞–ª—è–µ–º –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        for target in self.config["air_environment"]["targets"]:
            display_name = ObjectType.get_display_name(ObjectType[target["type"]])
            if f"{display_name} {target.get('id', '')}" == item_text:
                self.config["air_environment"]["targets"].remove(target)
                self.update_scene()
                self.update_objects_list()
                return

        for launcher in self.config["missile_launchers"]:
            display_name = ObjectType.get_display_name(ObjectType.MISSILE_LAUNCHER)
            if f"{display_name} {launcher.get('id', '')}" == item_text:
                self.config["missile_launchers"].remove(launcher)
                if launcher["id"] in self.config["combat_control_point"]["missile_launcher_ids"]:
                    self.config["combat_control_point"]["missile_launcher_ids"].remove(launcher["id"])
                self.update_scene()
                self.update_objects_list()
                return

        for radar in self.config["radars"]:
            display_name = ObjectType.get_display_name(ObjectType.RADAR)
            if f"{display_name} {radar.get('id', '')}" == item_text:
                self.config["radars"].remove(radar)
                if radar["id"] in self.config["combat_control_point"]["radar_ids"]:
                    self.config["combat_control_point"]["radar_ids"].remove(radar["id"])
                self.update_scene()
                self.update_objects_list()
                return

    def zoom_in(self):
        self.view.zoom(1.25)

    def zoom_out(self):
        self.view.zoom(0.9)

    def zoom_slider_changed(self, value):
        scale = value / 100.0
        self.view.resetTransform()
        self.view.scale(scale, scale)
        self.view.scale_factor = scale

    def update_zoom_slider(self, scale):
        self.zoom_slider.setValue(int(scale * 100))

    def update_status(self):
        count = (len(self.config["air_environment"]["targets"]) +
                 len(self.config["missile_launchers"]) +
                 len(self.config["radars"]))
        self.status_bar.showMessage(f"–û–±—ä–µ–∫—Ç–æ–≤: {count} | –ú–∞—Å—à—Ç–∞–±: {int(self.view.scale_factor * 100)}%")

    def save_config(self):
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            output_config = {
                "simulation": {
                    "time_step": self.config["simulation"]["time_step"],
                    "duration": self.config["simulation"]["duration"]
                },
                "air_environment": {
                    "id": self.config["air_environment"]["id"],
                    "position": self.config["air_environment"]["position"],
                    "targets": [
                        {
                            "id": target["id"],
                            "type": target["type"],
                            "position": target["position"],
                            "velocity": target["velocity"]
                        }
                        for target in self.config["air_environment"]["targets"]
                    ]
                },
                "combat_control_point": {
                    "id": self.config["combat_control_point"]["id"],
                    "missile_launcher_ids": self.config["combat_control_point"]["missile_launcher_ids"],
                    "radar_ids": self.config["combat_control_point"]["radar_ids"]
                },
                "missile_launchers": [
                    {
                        "id": launcher["id"],
                        "position": launcher["position"],
                        "max_missiles": launcher["max_missiles"],
                        "missiles": launcher.get("missiles", [])
                    }
                    for launcher in self.config["missile_launchers"]
                ],
                "radars": [
                    {
                        "id": radar["id"],
                        "position": radar["position"],
                        "azimuth_start": radar["azimuth_start"],
                        "elevation_start": radar["elevation_start"],
                        "max_distance": radar["max_distance"],
                        "azimuth_range": radar["azimuth_range"],
                        "elevation_range": radar["elevation_range"],
                        "azimuth_speed": radar["azimuth_speed"],
                        "elevation_speed": radar["elevation_speed"],
                        "scan_mode": radar["scan_mode"]
                    }
                    for radar in self.config["radars"]
                ]
            }

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
            with open(self.default_config_path, 'w', encoding='utf-8') as file:
                yaml.dump(output_config, file, allow_unicode=True, sort_keys=False)

            QMessageBox.information(self, "–£—Å–ø–µ—Ö",
                                    f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª:\n{os.path.abspath(self.default_config_path)}")
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é:\n{str(e)}")

    def run_simulation(self):
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
        self.save_config()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.manager = run_simulation_from_config('simulation_config.yaml')

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
        time_steps = sorted(self.manager.messages.keys())

        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ ID —Ä–∞–∫–µ—Ç –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        missile_ids = set()
        for launcher in self.config["missile_launchers"]:
            for missile in launcher.get("missiles", []):
                missile_ids.add(str(missile["id"]))

        print(f"Known missile IDs: {missile_ids}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–π–º–µ—Ä–∞
        self.simulation_timer = QTimer()
        self.current_step = 0
        self.max_step = len(time_steps)

        def update_simulation():
            if self.current_step >= self.max_step:
                self.simulation_timer.stop()
                QMessageBox.information(self, "–ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ", "–ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
                return

            current_time = time_steps[self.current_step]
            messages = self.manager.give_messages_by_type(
                msg_type=MessageType.DRAW_OBJECTS,
                step_time=current_time
            )

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            for msg in messages:
                if not isinstance(msg, CPPDrawerObjectsMessage):
                    continue

                obj_id = str(msg.obj_id)
                x, y, _ = msg.coordinates

                # –ï—Å–ª–∏ —ç—Ç–æ —Ä–∞–∫–µ—Ç–∞ (–ø–æ ID) –∏ –µ—ë –Ω–µ—Ç –Ω–∞ —Å—Ü–µ–Ω–µ - —Å–æ–∑–¥–∞–µ–º
                if obj_id in missile_ids and obj_id not in self.scene_objects:
                    missile_type = ObjectType.MISSILE
                    icon = self.icons.get(missile_type)
                    if icon:
                        obj = MapObject(icon, missile_type, obj_id)
                        obj.setPos(x - icon.width() / 2, y - icon.height() / 2)
                        self.scene.addItem(obj)
                        self.scene_objects[obj_id] = obj
                        obj.trajectory_points = []
                        print(f"Created missile {obj_id} at ({x}, {y})")

                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤ (–≤–∫–ª—é—á–∞—è —Ä–∞–∫–µ—Ç—ã)
                if obj_id in self.scene_objects:
                    obj = self.scene_objects[obj_id]

                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
                    current_pos = obj.pos()
                    new_x = x - obj.pixmap().width() / 2
                    new_y = y - obj.pixmap().height() / 2
                    obj.setPos(new_x, new_y)

                    print(f"Object {obj_id} visible: {obj.isVisible()} at ({new_x}, {new_y})")

                    # –î–ª—è –í–°–ï–• –¥–≤–∏–∂—É—â–∏—Ö—Å—è –æ–±—ä–µ–∫—Ç–æ–≤ (–≤–∫–ª—é—á–∞—è —Ä–∞–∫–µ—Ç—ã) –¥–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é
                    if obj.obj_type in [ObjectType.AIR_PLANE, ObjectType.HELICOPTER, ObjectType.MISSILE]:
                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–æ—á–∫—É
                        point_size = 6
                        point = self.scene.addEllipse(
                            x - point_size / 2,
                            y - point_size / 2,
                            point_size,
                            point_size,
                            QPen(Qt.NoPen),
                            QBrush(QColor(255, 100, 0, 220))
                        )
                        point.setZValue(10)

                        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
                        if not hasattr(obj, 'trajectory_points'):
                            obj.trajectory_points = []  # –ë—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–æ—á–∫–∏
                            obj.trajectory_lines = []  # –ë—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å –ª–∏–Ω–∏–∏
                            obj.last_position = (x, y)  # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–∑–∏—Ü–∏–∏

                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é
                        current_pos = (x, y)

                        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Ç–æ—á–∫–∞ - —Ä–∏—Å—É–µ–º –ª–∏–Ω–∏—é
                        if hasattr(obj, 'last_position'):
                            prev_x, prev_y = obj.last_position
                            line = self.scene.addLine(
                                prev_x, prev_y, x, y,
                                QPen(QColor(255, 150, 0, 180), 2))
                            line.setZValue(9)
                            obj.trajectory_lines.append(line)

                            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–æ–∑–∏—Ü–∏—é
                            obj.trajectory_points.append(point)
                            obj.last_position = current_pos

                            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
                            if len(obj.trajectory_points) > 100:
                                old_point = obj.trajectory_points.pop(0)
                            self.scene.removeItem(old_point)

                            if len(obj.trajectory_lines) > 0:
                                old_line = obj.trajectory_lines.pop(0)
                            self.scene.removeItem(old_line)

            self.status_bar.showMessage(
                f"–®–∞–≥: {self.current_step + 1}/{self.max_step} –í—Ä–µ–º—è: {current_time}"
            )
            self.current_step += 1

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 500 –º—Å)
        self.simulation_timer.timeout.connect(update_simulation)
        self.simulation_timer.start(500)

        QMessageBox.information(self, "–ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ", "–ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")

    def initialize_scene_objects(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–ª–æ–≤–∞—Ä—å scene_objects –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–π —Å—Ü–µ–Ω—ã"""
        self.scene_objects.clear()
        label_positions = {}

        for item in self.scene.items():
            if isinstance(item, QGraphicsTextItem):
                label_positions[(item.x(), item.y())] = item

        for item in self.scene.items():
            if isinstance(item, MapObject):
                obj_center_x = item.x() + item.pixmap().width() / 2
                expected_label_y = item.y() - 30
                expected_label_x = obj_center_x

                label = None
                for (x, y), lbl in label_positions.items():
                    if (abs(x - expected_label_x) < 50 and
                            abs(y - expected_label_y) < 50 and
                            str(item.obj_id) in lbl.toPlainText()):
                        label = lbl
                        break

                self.scene_objects[item.obj_id] = {
                    'object': item,
                    'label': label
                }

                if label is not None:
                    label.setParentItem(item)

    def is_id_unique(self, obj_id, obj_type=None):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º ID –≤–æ –≤—Å–µ—Ö —Ç–∏–ø–∞—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        for target in self.config["air_environment"]["targets"]:
            if str(target.get("id", "")) == str(obj_id):
                return False

        for launcher in self.config["missile_launchers"]:
            if str(launcher.get("id", "")) == str(obj_id):
                return False

        for radar in self.config["radars"]:
            if str(radar.get("id", "")) == str(obj_id):
                return False

        return True