import os
import numpy as np
import yaml
from PyQt5.QtCore import Qt, QSize, QTimer, QPointF
from PyQt5.QtGui import QColor, QPen, QPainter, QPixmap, QIcon, QBrush
from PyQt5.QtWidgets import (QMainWindow, QVBoxLayout, QHBoxLayout,
                             QWidget, QLabel, QPushButton, QListWidget, QComboBox,
                             QDialog, QGraphicsScene, QGraphicsTextItem,
                             QMessageBox, QSlider, QStatusBar, QGraphicsEllipseItem, QFileDialog, QGroupBox,
                             QFormLayout, QSpinBox)

from UI.Enums import ObjectType
from UI.MapGraphicsView import MapGraphicsView
from UI.MapObject import MapObject
from UI.ObjectDialog import ObjectDialog
from main import run_simulation_from_config
from modules.Manager import Manager
from modules.Messages import CPPDrawerObjectsMessage
from modules.constants import MessageType


class PolygonEditor(QMainWindow):
    def __init__(self):
        super().__init__()
        self.manager = Manager()
        self.scene_objects = {}  # {obj_id: MapObject}

        self.y_inverted = True
        self.y_coeff = -1 if self.y_inverted else 1

        self.setWindowTitle("–†–µ–¥–∞–∫—Ç–æ—Ä –ø–æ–ª–∏–≥–æ–Ω–∞")
        self.setGeometry(100, 100, 1600, 1800)


        self.scene_size = 3_000_000  # –†–∞–∑–º–µ—Ä —Å—Ü–µ–Ω—ã –≤ –º–µ—Ç—Ä–∞—Ö (—Ä–∞–¥–∏—É—Å –æ—Ç —Ü–µ–Ω—Ç—Ä–∞)
        self.grid_step = 2000

        # –ò–∫–æ–Ω–∫–∏ –æ–±—ä–µ–∫—Ç–æ–≤
        self.icons = {
            ObjectType.AIR_PLANE: self.load_icon("UI/images/aircraft_icon.png", "üõ©Ô∏è", 300),
            ObjectType.HELICOPTER: self.load_icon("UI/images/helicopter.png", "üöÅ", 300),
            ObjectType.MISSILE_LAUNCHER: self.load_icon("UI/images/missile_launcher_icon.png", "üöÄ", 300),
            ObjectType.MISSILE: self.load_icon("UI/images/GM.png", "*", 200),
            ObjectType.RADAR: self.load_icon("UI/images/radar_icon.png", "üì°", 300),
            ObjectType.AIR_PLANE_RED: self.load_icon("UI/images/aircraft_icon_red.png", "*", 300),
            ObjectType.HELICOPTER_RED: self.load_icon("UI/images/helicopter_red.png", "*", 300),
        }

            # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.default_config = {
            "simulation": {
                "time_step": 200,
                "duration": 40000
            },
            "air_environment": {
                "id": 999,
                "position": [0.0, 0.0, 0.0],
                "targets": []
            },
            "combat_control_point": {
                "id": 0,
                "missile_launcher_ids": [],
                "radar_ids": []
            },
            "missile_launchers": [],
            "radars": []
        }

        self.config = self.default_config.copy()
        self.next_ids = {
            ObjectType.AIR_PLANE: 1,
            ObjectType.HELICOPTER: 1,
            # ObjectType.ANOTHER: 1,
            ObjectType.MISSILE_LAUNCHER: 3,
            ObjectType.RADAR: 5
        }
        self.default_config_path = "simulation_config.yaml"
        self.init_ui()

    def convert_coordinates(self, x, y):
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å —É—á–µ—Ç–æ–º –∏–Ω–≤–µ—Ä—Å–∏–∏ Y"""
        return x, self.y_coeff * y

    def load_icon(self, filename, fallback, size, color=None):
        if os.path.exists(filename):
            pixmap = QPixmap(filename)
            if color:
                # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–æ–≤–æ–π —Ñ–∏–ª—å—Ç—Ä, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ü–≤–µ—Ç
                painter = QPainter(pixmap)
                painter.setCompositionMode(QPainter.CompositionMode_SourceIn)
                painter.fillRect(pixmap.rect(), color)
                painter.end()
            return pixmap.scaled(size, size, Qt.KeepAspectRatio, Qt.SmoothTransformation)
        else:
            pixmap = QPixmap(size, size)
            pixmap.fill(Qt.transparent)
            painter = QPainter(pixmap)
            painter.setFont(self.font())
            if color:
                painter.setPen(color)
            painter.drawText(pixmap.rect(), Qt.AlignCenter, fallback)
            painter.end()
            return pixmap

    def init_ui(self):
        self.setWindowIcon(QIcon(self.icons[ObjectType.AIR_PLANE]))

        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        main_layout = QHBoxLayout(central_widget)

        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        left_panel = QWidget()
        left_panel.setMaximumWidth(400)  # –£–≤–µ–ª–∏—á–∏–º —à–∏—Ä–∏–Ω—É –ø–∞–Ω–µ–ª–∏
        left_layout = QVBoxLayout(left_panel)

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–º—É–ª—è—Ü–∏–∏ –≤ –Ω–∞—á–∞–ª–æ
        left_layout.addWidget(self.init_simulation_settings_ui())

        # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –æ–±—ä–µ–∫—Ç–∞
        self.object_type_combo = QComboBox()
        self.object_type_combo.setIconSize(QSize(48, 48))
        for obj_type in [ObjectType.AIR_PLANE, ObjectType.HELICOPTER,
                         ObjectType.MISSILE_LAUNCHER, ObjectType.RADAR]:
            self.object_type_combo.addItem(
                QIcon(self.icons[obj_type]),
                ObjectType.get_display_name(obj_type),
                obj_type
            )

        self.object_type_combo.currentIndexChanged.connect(self.set_object_type)
        self.current_object_type = ObjectType.AIR_PLANE

        left_layout.addWidget(QLabel("–¢–∏–ø –æ–±—ä–µ–∫—Ç–∞:"))
        left_layout.addWidget(self.object_type_combo)

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è - —Ç–µ–ø–µ—Ä—å –≤ –¥–≤–∞ —Ä—è–¥–∞
        btn_layout1 = QHBoxLayout()
        btn_layout2 = QHBoxLayout()

        # –ü–µ—Ä–≤—ã–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
        self.delete_btn = QPushButton("–£–¥–∞–ª–∏—Ç—å")
        self.delete_btn.setIcon(QIcon.fromTheme("edit-delete"))
        self.delete_btn.clicked.connect(self.delete_object)
        self.delete_btn.setMinimumWidth(120)  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —à–∏—Ä–∏–Ω–∞

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥–∞
        self.load_btn = QPushButton("–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥")
        self.load_btn.setIcon(QIcon.fromTheme("document-open"))
        self.load_btn.clicked.connect(self.load_config)


        btn_layout1.addWidget(self.delete_btn)
        btn_layout1.addWidget(self.load_btn)


        # –í—Ç–æ—Ä–æ–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
        self.save_btn = QPushButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å")
        self.save_btn.setIcon(QIcon.fromTheme("document-save"))
        self.save_btn.clicked.connect(self.save_config)
        self.save_btn.setMinimumWidth(120)

        self.run_btn = QPushButton("–ó–∞–ø—É—Å–∫")
        self.run_btn.setIcon(QIcon.fromTheme("media-playback-start"))
        self.run_btn.clicked.connect(self.run_simulation)
        self.run_btn.setMinimumWidth(120)

        self.reset_btn = QPushButton("–°–±—Ä–æ—Å–∏—Ç—å")
        self.reset_btn.setIcon(QIcon.fromTheme("edit-clear"))
        self.reset_btn.clicked.connect(self.reset_experiment)
        self.reset_btn.setMinimumWidth(120)



        btn_layout2.addWidget(self.save_btn)
        btn_layout2.addWidget(self.run_btn)
        btn_layout2.addWidget(self.reset_btn)


        left_layout.addLayout(btn_layout1)
        left_layout.addLayout(btn_layout2)

        # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
        zoom_layout = QHBoxLayout()
        self.zoom_out_btn = QPushButton("-")
        self.zoom_out_btn.clicked.connect(self.zoom_out)
        self.zoom_out_btn.setFixedWidth(30)  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫–Ω–æ–ø–æ–∫ +/-

        self.zoom_slider = QSlider(Qt.Horizontal)
        self.zoom_slider.setRange(1, 1000)
        self.zoom_slider.setValue(50)
        self.zoom_slider.valueChanged.connect(self.zoom_slider_changed)

        self.zoom_in_btn = QPushButton("+")
        self.zoom_in_btn.clicked.connect(self.zoom_in)
        self.zoom_in_btn.setFixedWidth(30)

        zoom_layout.addWidget(self.zoom_out_btn)
        zoom_layout.addWidget(self.zoom_slider)
        zoom_layout.addWidget(self.zoom_in_btn)
        left_layout.addLayout(zoom_layout)

        # –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤
        self.objects_list = QListWidget()
        self.objects_list.itemSelectionChanged.connect(self.select_object)
        left_layout.addWidget(QLabel("–û–±—ä–µ–∫—Ç—ã –Ω–∞ –ø–æ–ª–∏–≥–æ–Ω–µ:"))
        left_layout.addWidget(self.objects_list)

        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –∫–∞—Ä—Ç–∞
        right_panel = QWidget()
        right_layout = QVBoxLayout(right_panel)

        # –°—Ü–µ–Ω–∞ –∏ –≤–∏–¥
        self.scene = QGraphicsScene()
        scene_rect = -self.scene_size, -self.scene_size, 2 * self.scene_size, 2 * self.scene_size
        self.scene.setSceneRect(*scene_rect)

        self.view = MapGraphicsView(self.scene, self)
        self.view.setMinimumSize(800, 800)
        self.view.zoomChanged.connect(self.update_zoom_slider)

        right_layout.addWidget(self.view)

        main_layout.addWidget(left_panel)
        main_layout.addWidget(right_panel)

        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_bar = QStatusBar()
        self.setStatusBar(self.status_bar)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        self.draw_grid()
        self.update_status()

    def set_object_type(self, index):
        self.current_object_type = self.object_type_combo.itemData(index)
        self.status_bar.showMessage(f"–í—ã–±—Ä–∞–Ω —Ç–∏–ø: {ObjectType.get_display_name(self.current_object_type)}", 2000)

    def add_object(self, position):
        x, y = self.convert_coordinates(position.x(), position.y())
        adjusted_position = QPointF(x, y)  # Z-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –æ—Å—Ç–∞–µ—Ç—Å—è 0

        default_id = self.next_ids[self.current_object_type]
        dialog = ObjectDialog(self.current_object_type, adjusted_position, default_id, self)

        if dialog.exec_() == QDialog.Accepted:
            obj_data = dialog.get_object_data()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å ID
            if not self.is_id_unique(obj_data["id"]):
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞",
                                    f"–û–±—ä–µ–∫—Ç —Å ID {obj_data['id']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π ID.")
                return  # –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç

            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ ID —É–Ω–∏–∫–∞–ª–µ–Ω
            self.next_ids[self.current_object_type] = max(
                self.next_ids[self.current_object_type],
                int(obj_data["id"]) + 1)

            # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –≤ –∫–æ–Ω—Ñ–∏–≥
            if self.current_object_type in [ObjectType.AIR_PLANE, ObjectType.HELICOPTER]:
                self.config["air_environment"]["targets"].append(obj_data)
            elif self.current_object_type == ObjectType.MISSILE_LAUNCHER:
                self.config["missile_launchers"].append(obj_data)
                self.config["combat_control_point"]["missile_launcher_ids"].append(obj_data["id"])
                obj_data["missiles"] = [
                    {
                        "id": obj_data["id"]* 1000 + i,
                        "position": obj_data["position"],  # –ü–æ–∑–∏—Ü–∏—è —Ä–∞–∫–µ—Ç—ã = –ø–æ–∑–∏—Ü–∏–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
                        "velocity": obj_data["missile_velocity"],
                        "explosion_radius": obj_data["missile_radius"],
                        "life_time": obj_data["missile_life_time"],
                    }
                    for i in range(1, obj_data.get("max_missiles", 1) + 1)
                ]
            elif self.current_object_type == ObjectType.RADAR:
                self.config["radars"].append(obj_data)
                self.config["combat_control_point"]["radar_ids"].append(obj_data["id"])

            self.update_scene()
            self.update_objects_list()

    def draw_grid(self):
        """–†–∏—Å—É–µ—Ç —Å–µ—Ç–∫—É —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏"""
        # –û—Å–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        pen = QPen(QColor(100, 100, 255, 150), 2)
        self.scene.addLine(-self.scene_size, 0, self.scene_size, 0, pen)  # –û—Å—å X
        self.scene.addLine(0, self.scene_size, 0, -self.scene_size, pen)  # –û—Å—å Y

        # –ü–æ–¥–ø–∏—Å–∏ –æ—Å–µ–π
        font = self.font()
        font.setPointSize(200)

        # –ü–æ–¥–ø–∏—Å—å –æ—Å–∏ X
        x_label = self.scene.addText("X")
        x_label.setFont(font)
        x_label.setPos(self.scene_size - 2000, 50)

        # –ü–æ–¥–ø–∏—Å—å –æ—Å–∏ Y
        y_label = self.scene.addText("Y")
        y_label.setFont(font)
        y_label.setPos(-300, -self.scene_size + 2000)

        # –°–µ—Ç–∫–∞ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —à–∞–≥–æ–º
        pen = QPen(QColor(200, 200, 200, 100), 1)
        for i in range(-self.scene_size, self.scene_size + 1, self.grid_step):
            if i != 0:
                # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
                self.scene.addLine(i, -self.scene_size, i, self.scene_size, pen)
                # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ª–∏–Ω–∏–∏
                self.scene.addLine(-self.scene_size, i, self.scene_size, i, pen)

        # –ü–æ–¥–ø–∏—Å–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        font.setPointSize(100)
        for i in range(-self.scene_size, self.scene_size + 1, self.grid_step):
            if i != 0:
                # –ü–æ–¥–ø–∏—Å–∏ –ø–æ –æ—Å–∏ X
                x_text = self.scene.addText(f"{i / 1000:.0f}–∫–º")
                x_text.setFont(font)
                x_text.setPos(i - 50, 50)

                # –ü–æ–¥–ø–∏—Å–∏ –ø–æ –æ—Å–∏ Y
                y_text = self.scene.addText(f"{-i / 1000:.0f}–∫–º" if self.y_inverted else f"{i / 1000:.0f}–∫–º")
                y_text.setFont(font)
                y_text.setPos(-50, i - 100)

    def update_scene(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ü–µ–Ω—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        # –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º —Å—Ü–µ–Ω—É –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
        self.clear_scene_completely()
        self.draw_grid()

        # –†–∏—Å—É–µ–º –æ–±—ä–µ–∫—Ç—ã –∑–∞–Ω–æ–≤–æ
        for target in self.config["air_environment"]["targets"]:
            self.draw_map_object(target["position"], target["type"], target.get("id", ""))

        for launcher in self.config["missile_launchers"]:
            self.draw_map_object(launcher["position"], "MISSILE_LAUNCHER", launcher.get("id", ""))
            for missile in launcher.get("missiles", []):
                self.draw_map_object(launcher["position"], "MISSILE", missile["id"])

        for radar in self.config["radars"]:
            self.draw_map_object(radar["position"], "RADAR", radar.get("id", ""))

    def draw_map_object(self, position, obj_type, obj_id):
        enum_type = ObjectType[obj_type] if isinstance(obj_type, str) else obj_type
        icon = self.icons.get(enum_type, self.icons[ObjectType.AIR_PLANE])

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        x, y = self.convert_coordinates(position[0], position[1])

        # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç
        if str(obj_id) in self.scene_objects:
            obj = self.scene_objects[str(obj_id)]
            obj.setPos(x - icon.width()/2, y - icon.height()/2)
        else:
            obj = MapObject(icon, enum_type, obj_id)
            obj.setPos(x - icon.width()/2, y - icon.height()/2)
            self.scene.addItem(obj)
            self.scene_objects[str(obj_id)] = obj
            obj.trajectory_points = []

        # –î–ª—è –¥–≤–∏–∂—É—â–∏—Ö—Å—è –æ–±—ä–µ–∫—Ç–æ–≤ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
        if enum_type in [ObjectType.AIR_PLANE, ObjectType.HELICOPTER, ObjectType.MISSILE]:
            point = self.scene.addEllipse(
                x - 2, y - 2, 4, 4,
                QPen(Qt.NoPen),
                QBrush(QColor(255, 165, 0, 200))
            )
            point.setZValue(-1)
            obj.trajectory_points.append(point)

            if len(obj.trajectory_points) > 50:
                old_point = obj.trajectory_points.pop(0)
                self.scene.removeItem(old_point)

        # –î–ª—è —Ä–∞–¥–∞—Ä–∞ —Ä–∏—Å—É–µ–º –∑–æ–Ω—É –¥–µ–π—Å—Ç–≤–∏—è
        elif enum_type == ObjectType.RADAR:
            radar_config = None
            for radar in self.config["radars"]:
                if str(radar["id"]) == str(obj_id):
                    radar_config = radar
                    break

            if radar_config:
                radius = radar_config.get("max_distance", 10000)
                if hasattr(obj, 'radar_range'):
                    self.scene.removeItem(obj.radar_range)

                radar_range = self.scene.addEllipse(
                    x - radius,
                    y - radius,
                    radius * 2,
                    radius * 2,
                    QPen(QColor(0, 200, 0, 80)),
                    QBrush(QColor(0, 200, 0, 30))
                )
                radar_range.setZValue(-2)
                obj.radar_range = radar_range

        self.scene_objects[str(obj_id)] = obj

    def update_objects_list(self):
        self.objects_list.clear()

        for target in self.config["air_environment"]["targets"]:
            display_name = ObjectType.get_display_name(ObjectType[target["type"]])
            self.objects_list.addItem(f"{display_name} {target.get('id', '')}")

        for launcher in self.config["missile_launchers"]:
            display_name = ObjectType.get_display_name(ObjectType.MISSILE_LAUNCHER)
            self.objects_list.addItem(f"{display_name} {launcher.get('id', '')}")

        for radar in self.config["radars"]:
            display_name = ObjectType.get_display_name(ObjectType.RADAR)
            self.objects_list.addItem(f"{display_name} {radar.get('id', '')}")

        self.update_status()

    def select_object(self):
        selected = self.objects_list.currentItem()
        if selected:
            for item in self.scene.items():
                if isinstance(item, MapObject):
                    display_name = ObjectType.get_display_name(item.obj_type)
                    if f"{display_name} {item.obj_id}" == selected.text():
                        self.view.centerOn(item)
                        break

    def delete_object(self):
        selected = self.objects_list.currentItem()
        if not selected:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ –≤—ã–±—Ä–∞–Ω –æ–±—ä–µ–∫—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return

        item_text = selected.text()

        # –£–¥–∞–ª—è–µ–º –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        for target in self.config["air_environment"]["targets"]:
            display_name = ObjectType.get_display_name(ObjectType[target["type"]])
            if f"{display_name} {target.get('id', '')}" == item_text:
                self.config["air_environment"]["targets"].remove(target)
                self.update_scene()
                self.update_objects_list()
                return

        for launcher in self.config["missile_launchers"]:
            display_name = ObjectType.get_display_name(ObjectType.MISSILE_LAUNCHER)
            if f"{display_name} {launcher.get('id', '')}" == item_text:
                self.config["missile_launchers"].remove(launcher)
                if launcher["id"] in self.config["combat_control_point"]["missile_launcher_ids"]:
                    self.config["combat_control_point"]["missile_launcher_ids"].remove(launcher["id"])
                self.update_scene()
                self.update_objects_list()
                return

        for radar in self.config["radars"]:
            display_name = ObjectType.get_display_name(ObjectType.RADAR)
            if f"{display_name} {radar.get('id', '')}" == item_text:
                self.config["radars"].remove(radar)
                if radar["id"] in self.config["combat_control_point"]["radar_ids"]:
                    self.config["combat_control_point"]["radar_ids"].remove(radar["id"])
                self.update_scene()
                self.update_objects_list()
                return

    def zoom_in(self):
        current_scale = self.view.scale_factor
        new_scale = current_scale * 1.1
        if new_scale <= self.view.max_scale:
            self.view.scale(1.1, 1.1)
            self.view.scale_factor = new_scale
            self.update_zoom_slider(new_scale)

    def zoom_out(self):
        current_scale = self.view.scale_factor
        new_scale = current_scale * 0.9
        if new_scale >= self.view.min_scale:
            self.view.scale(0.9, 0.9)
            self.view.scale_factor = new_scale
            self.update_zoom_slider(new_scale)

    def zoom_out(self):
        current_scale = self.view.scale_factor
        new_scale = current_scale * 0.9
        min_scale = 0.001  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –º–∞—Å—à—Ç–∞–± —É–º–µ–Ω—å—à–µ–Ω–∏—è

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –¥–æ–ø—É—Å—Ç–∏–º—ã–π –º–∞—Å—à—Ç–∞–± –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞–∑–º–µ—Ä–∞ —Å—Ü–µ–Ω—ã
        view_size = min(self.view.width(), self.view.height())
        scene_size = 2 * self.scene_size
        absolute_min_scale = view_size / scene_size * 0.9

        if new_scale >= max(min_scale, absolute_min_scale):
            self.view.scale(0.9, 0.9)
            self.view.scale_factor = new_scale
            self.update_zoom_slider(new_scale)

    def zoom_slider_changed(self, value):
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ª–∞–π–¥–µ—Ä–∞ (1-1000) –≤ –º–∞—Å—à—Ç–∞–± (0.001-10)
        min_scale = 0.001
        max_scale = 1.0
        scale = min_scale + (max_scale - min_scale) * (value / 1000.0)

        self.view.resetTransform()
        self.view.scale(scale, scale)
        self.view.scale_factor = scale

    def update_zoom_slider(self, scale):
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –º–∞—Å—à—Ç–∞–± (0.001-10) –≤ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–ª–∞–π–¥–µ—Ä–∞ (1-1000)
        min_scale = 0.001
        max_scale = 1.0
        value = int(((scale - min_scale) / (max_scale - min_scale)) * 1000)
        self.zoom_slider.setValue(value)

    def update_status(self):
        count = (len(self.config["air_environment"]["targets"]) +
                 len(self.config["missile_launchers"]) +
                 len(self.config["radars"]))
        self.status_bar.showMessage(f"–û–±—ä–µ–∫—Ç–æ–≤: {count} | –ú–∞—Å—à—Ç–∞–±: {int(self.view.scale_factor * 100)}%")

    def save_config(self, source = False):
        try:
            self.update_simulation_settings()

            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            output_config = {
                "simulation": {
                    "time_step": self.config["simulation"]["time_step"],
                    "duration": self.config["simulation"]["duration"]
                },
                "air_environment": {
                    "id": self.config["air_environment"]["id"],
                    "position": self.config["air_environment"]["position"],
                    "targets": [
                        {
                            "id": target["id"],
                            "type": target["type"],
                            "position": target["position"],
                            "velocity": target["velocity"]
                        }
                        for target in self.config["air_environment"]["targets"]
                    ]
                },
                "combat_control_point": {
                    "id": self.config["combat_control_point"]["id"],
                    "missile_launcher_ids": self.config["combat_control_point"]["missile_launcher_ids"],
                    "radar_ids": self.config["combat_control_point"]["radar_ids"]
                },
                "missile_launchers": [
                    {
                        "id": launcher["id"],
                        "position": launcher["position"],
                        "max_missiles": launcher["max_missiles"],
                        "missiles": launcher.get("missiles", [])
                    }
                    for launcher in self.config["missile_launchers"]
                ],
                "radars": [
                    {
                        "id": radar["id"],
                        "position": radar["position"],
                        "azimuth_start": radar["azimuth_start"],
                        "elevation_start": radar["elevation_start"],
                        "max_distance": radar["max_distance"],
                        "azimuth_range": radar["azimuth_range"],
                        "elevation_range": radar["elevation_range"],
                        "azimuth_speed": radar["azimuth_speed"],
                        "elevation_speed": radar["elevation_speed"],
                        "scan_mode": radar["scan_mode"]
                    }
                    for radar in self.config["radars"]
                ]
            }

            if source == False:
                # –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                file_path, _ = QFileDialog.getSaveFileName(
                    self,
                    "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é",
                    self.default_config_path,  # –ù–∞—á–∞–ª—å–Ω—ã–π –ø—É—Ç—å
                    "YAML Files (*.yaml *.yml);;All Files (*)"
                )
            else:
                file_path = self.default_config_path

            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –≤—ã–±–æ—Ä
            if not file_path:
                return

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª
            with open(file_path, 'w', encoding='utf-8') as file:
                yaml.dump(output_config, file, allow_unicode=True, sort_keys=False)


            QMessageBox.information(self, "–£—Å–ø–µ—Ö",
                                    f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª:\n{os.path.abspath(file_path)}")
        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é:\n{str(e)}")

    def run_simulation(self):
        # –ü–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Å–∏–º—É–ª—è—Ü–∏–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º —Å—Ü–µ–Ω—É
        # self.clear_scene_completely()
        # self.draw_grid()  # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ç–∫—É

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º
        self.save_config(source = True)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.manager = run_simulation_from_config('simulation_config.yaml')

        time_steps = sorted(self.manager.messages.keys())

        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ ID —Ä–∞–∫–µ—Ç –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        missile_ids = set()
        for launcher in self.config["missile_launchers"]:
            for missile in launcher.get("missiles", []):
                missile_ids.add(str(missile["id"]))

        #print(f"Known missile IDs: {missile_ids}")  # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–π–º–µ—Ä–∞
        self.simulation_timer = QTimer()
        self.current_step = 0
        self.max_step = len(time_steps)

        def update_simulation():
            if self.current_step >= self.max_step:
                self.simulation_timer.stop()
                QMessageBox.information(self, "–ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ", "–ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
                return

            current_time = time_steps[self.current_step]
            messages = self.manager.give_messages_by_type(
                msg_type=MessageType.DRAW_OBJECTS,
                step_time=current_time
            )

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
            for msg in messages:
                if not isinstance(msg, CPPDrawerObjectsMessage):
                    continue

                obj_id = str(msg.obj_id)
                x, y, _ = msg.coordinates
                x, y = self.convert_coordinates(x, y)

                # –ï—Å–ª–∏ —ç—Ç–æ —Ä–∞–∫–µ—Ç–∞ (–ø–æ ID) –∏ –µ—ë –Ω–µ—Ç –Ω–∞ —Å—Ü–µ–Ω–µ - —Å–æ–∑–¥–∞–µ–º
                if obj_id in missile_ids and obj_id not in self.scene_objects:
                    missile_type = ObjectType.MISSILE
                    icon = self.icons.get(missile_type)
                    if icon:
                        obj = MapObject(icon, missile_type, obj_id)
                        obj.setPos(x - icon.width() / 2, y - icon.height() / 2)
                        self.scene.addItem(obj)
                        self.scene_objects[obj_id] = obj
                        obj.trajectory_points = []
                        #print(f"Created missile {obj_id} at ({x}, {y})")

                obj_type = None

                # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤ (–≤–∫–ª—é—á–∞—è —Ä–∞–∫–µ—Ç—ã)
                if obj_id in self.scene_objects:
                    obj = self.scene_objects[obj_id]
                    obj_type = self.scene_objects[obj_id].obj_type

                    # –î–ª—è —Å–∞–º–æ–ª–µ—Ç–æ–≤ –∏ –≤–µ—Ä—Ç–æ–ª–µ—Ç–æ–≤ –º–µ–Ω—è–µ–º –∏–∫–æ–Ω–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∏–¥–∏–º–æ—Å—Ç–∏
                    if obj_type in [ObjectType.AIR_PLANE, ObjectType.HELICOPTER]:
                        if msg.is_visible_by_radar:
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—Ä–∞—Å–Ω—É—é –∏–∫–æ–Ω–∫—É
                            if obj_type == ObjectType.AIR_PLANE:
                                new_icon = self.icons[ObjectType.AIR_PLANE_RED]
                            else:
                                new_icon = self.icons[ObjectType.HELICOPTER_RED]
                        else:
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é –∏–∫–æ–Ω–∫—É
                            new_icon = self.icons[obj_type]

                        obj.setPixmap(new_icon)

                    new_x = x - obj.pixmap().width() / 2
                    new_y = y - obj.pixmap().height() / 2
                    obj.setPos(new_x, new_y)

                    #print(f"Object {obj_id} visible: {obj.isVisible()} at ({new_x}, {new_y})")

                    # –î–ª—è –í–°–ï–• –¥–≤–∏–∂—É—â–∏—Ö—Å—è –æ–±—ä–µ–∫—Ç–æ–≤ (–≤–∫–ª—é—á–∞—è —Ä–∞–∫–µ—Ç—ã) –¥–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é
                    if obj.obj_type in [ObjectType.AIR_PLANE, ObjectType.HELICOPTER, ObjectType.MISSILE]:
                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Ç–æ—á–∫—É
                        point_size = 6
                        point = self.scene.addEllipse(
                            x - point_size / 2,
                            y - point_size / 2,
                            point_size,
                            point_size,
                            QPen(Qt.NoPen),
                            QBrush(QColor(255, 100, 0, 220))
                        )
                        point.setZValue(10)

                        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏
                        if not hasattr(obj, 'trajectory_points'):
                            obj.trajectory_points = []  # –ë—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–æ—á–∫–∏
                            obj.trajectory_lines = []  # –ë—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å –ª–∏–Ω–∏–∏
                            obj.last_position = (x, y)  # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø–æ–∑–∏—Ü–∏–∏

                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é
                        current_pos = (x, y)

                        # –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∞—è —Ç–æ—á–∫–∞ - —Ä–∏—Å—É–µ–º –ª–∏–Ω–∏—é
                        if hasattr(obj, 'last_position'):
                            if obj.obj_type == ObjectType.MISSILE:
                                color = QPen(QColor(0, 0, 255, 180), 10)
                            else:
                                color = QPen(QColor(255, 150, 0, 180), 10)

                            if obj.last_position != None:
                                prev_x, prev_y = obj.last_position
                                line = self.scene.addLine(
                                    prev_x, prev_y, x, y,
                                    color)
                                line.setZValue(9)

                            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ—á–∫—É –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø–æ–∑–∏—Ü–∏—é
                            obj.last_position = current_pos

            self.status_bar.showMessage(
                f"–®–∞–≥: {self.current_step + 1}/{self.max_step} –í—Ä–µ–º—è: {current_time}"
            )
            self.current_step += 1

        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä (–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 500 –º—Å)
        self.simulation_timer.timeout.connect(update_simulation)
        self.simulation_timer.start(500)

        QMessageBox.information(self, "–ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ", "–ú–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ")

    def initialize_scene_objects(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–ª–æ–≤–∞—Ä—å scene_objects –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–π —Å—Ü–µ–Ω—ã"""
        self.scene_objects.clear()
        label_positions = {}

        for item in self.scene.items():
            if isinstance(item, QGraphicsTextItem):
                label_positions[(item.x(), item.y())] = item

        for item in self.scene.items():
            if isinstance(item, MapObject):
                obj_center_x = item.x() + item.pixmap().width() / 2
                expected_label_y = item.y() - 30
                expected_label_x = obj_center_x

                label = None
                for (x, y), lbl in label_positions.items():
                    if (abs(x - expected_label_x) < 50 and
                            abs(y - expected_label_y) < 50 and
                            str(item.obj_id) in lbl.toPlainText()):
                        label = lbl
                        break

                self.scene_objects[item.obj_id] = {
                    'object': item,
                    'label': label
                }

                if label is not None:
                    label.setParentItem(item)

    def is_id_unique(self, obj_id, obj_type=None):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º ID –≤–æ –≤—Å–µ—Ö —Ç–∏–ø–∞—Ö –æ–±—ä–µ–∫—Ç–æ–≤
        for target in self.config["air_environment"]["targets"]:
            if str(target.get("id", "")) == str(obj_id):
                return False

        for launcher in self.config["missile_launchers"]:
            if str(launcher.get("id", "")) == str(obj_id):
                return False

        for radar in self.config["radars"]:
            if str(radar.get("id", "")) == str(obj_id):
                return False

        return True


    def clear_scene_completely(self):
        """–ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ—Ç —Å—Ü–µ–Ω—É, –≤–∫–ª—é—á–∞—è –≤—Å–µ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã"""
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–æ —Å—Ü–µ–Ω—ã
        self.scene.clear()

        # –û—á–∏—â–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –æ–±—ä–µ–∫—Ç–æ–≤
        self.scene_objects.clear()

        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ü–µ–Ω—ã
        self.scene.setSceneRect(-15000, -15000, 30000, 30000)

    def reset_experiment(self):
        msg_box = QMessageBox(self)
        msg_box.setWindowTitle("–°–±—Ä–æ—Å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞")
        msg_box.setText("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç? –í—Å–µ –æ–±—ä–µ–∫—Ç—ã –∏ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.")

        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å —Ä—É—Å—Å–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º
        button_yes = msg_box.addButton("–î–∞", QMessageBox.YesRole)
        button_no = msg_box.addButton("–ù–µ—Ç", QMessageBox.NoRole)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –∏ –∂–¥–µ–º –æ—Ç–≤–µ—Ç–∞
        msg_box.exec()

        if msg_box.clickedButton() == button_yes:
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä —Å–∏–º—É–ª—è—Ü–∏–∏, –µ—Å–ª–∏ –æ–Ω –∞–∫—Ç–∏–≤–µ–Ω
            if hasattr(self, 'simulation_timer') and self.simulation_timer.isActive():
                self.simulation_timer.stop()

            # –ü–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–∞–µ–º —Å—Ü–µ–Ω—É
            self.clear_scene_completely()

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            self.config = {
                "simulation": {
                    "time_step": 200,
                    "duration": 40000
                },
                "air_environment": {
                    "id": 999,
                    "position": [0.0, 0.0, 0.0],
                    "targets": []
                },
                "combat_control_point": {
                    "id": 0,
                    "missile_launcher_ids": [],
                    "radar_ids": []
                },
                "missile_launchers": [],
                "radars": []
            }
            self.save_config(source=True)

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ ID
            self.next_ids = {
                ObjectType.AIR_PLANE: 1,
                ObjectType.HELICOPTER: 1,
                ObjectType.MISSILE_LAUNCHER: 3,
                ObjectType.RADAR: 5
            }

            # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤
            self.objects_list.clear()

            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ç–∫—É
            self.draw_grid()

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            self.update_status()

            QMessageBox.information(self, "–°–±—Ä–æ—Å", "–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é —Å–±—Ä–æ—à–µ–Ω, –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã –∏ —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏–∏ —É–¥–∞–ª–µ–Ω—ã.")

    def load_config(self):
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
        file_path, _ = QFileDialog.getOpenFileName(
            self,
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏",
            "",
            "YAML Files (*.yaml *.yml);;All Files (*)"
        )

        if not file_path:
            return  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –≤—ã–±–æ—Ä

        try:
            with open(file_path, 'r', encoding='utf-8') as file:
                loaded_config = yaml.safe_load(file)

            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥–∞
            if not self.validate_config(loaded_config):
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞")
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            self.config = loaded_config

            # –û–±–Ω–æ–≤–ª—è–µ–º UI –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∏–º—É–ª—è—Ü–∏–∏
            self.time_step_edit.setValue(self.config["simulation"]["time_step"])
            self.duration_edit.setValue(self.config["simulation"]["duration"])

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ ID
            self.update_id_counters()

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ü–µ–Ω—É
            self.update_scene()
            self.update_objects_list()

            QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é:\n{str(e)}")

    def validate_config(self, config):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        required_sections = [
            'simulation',
            'air_environment',
            'combat_control_point',
            'missile_launchers',
            'radars'
        ]

        for section in required_sections:
            if section not in config:
                return False

        return True

    def update_id_counters(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—á–µ—Ç—á–∏–∫–∏ ID –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        # –î–ª—è –≤–æ–∑–¥—É—à–Ω—ã—Ö —Ü–µ–ª–µ–π
        if self.config["air_environment"]["targets"]:
            max_id = max(t["id"] for t in self.config["air_environment"]["targets"])
            self.next_ids[ObjectType.AIR_PLANE] = max_id + 1
            self.next_ids[ObjectType.HELICOPTER] = max_id + 1

        # –î–ª—è –ø—É—Å–∫–æ–≤—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–æ–∫
        if self.config["missile_launchers"]:
            max_id = max(m["id"] for m in self.config["missile_launchers"])
            self.next_ids[ObjectType.MISSILE_LAUNCHER] = max_id + 1

        # –î–ª—è —Ä–∞–¥–∞—Ä–æ–≤
        if self.config["radars"]:
            max_id = max(r["id"] for r in self.config["radars"])
            self.next_ids[ObjectType.RADAR] = max_id + 1

    def init_simulation_settings_ui(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç UI –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–∏–º—É–ª—è—Ü–∏–∏"""
        self.simulation_settings_group = QGroupBox("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏–º—É–ª—è—Ü–∏–∏")
        layout = QFormLayout()

        # –ü–æ–ª–µ –¥–ª—è time_step
        self.time_step_edit = QSpinBox()
        self.time_step_edit.setRange(0, 1000)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —à–∞–≥ (–º—Å)
        self.time_step_edit.setValue(self.config["simulation"]["time_step"])
        self.time_step_edit.setSuffix(" –º—Å")
        self.time_step_edit.valueChanged.connect(self.update_simulation_settings)

        # –ü–æ–ª–µ –¥–ª—è duration
        self.duration_edit = QSpinBox()
        self.duration_edit.setRange(0, 100000)  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (–º—Å)
        self.duration_edit.setValue(self.config["simulation"]["duration"])
        self.duration_edit.setSuffix(" –º—Å")
        self.duration_edit.valueChanged.connect(self.update_simulation_settings)

        layout.addRow("–®–∞–≥ —Å–∏–º—É–ª—è—Ü–∏–∏:", self.time_step_edit)
        layout.addRow("–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:", self.duration_edit)

        self.simulation_settings_group.setLayout(layout)
        return self.simulation_settings_group

    def update_simulation_settings(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏–º—É–ª—è—Ü–∏–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∑–Ω–∞—á–µ–Ω–∏–π"""
        self.config["simulation"]["time_step"] = self.time_step_edit.value()
        self.config["simulation"]["duration"] = self.duration_edit.value()